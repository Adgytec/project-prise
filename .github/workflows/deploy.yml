name: Deploy

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS S3 (Staging)
        run: |
          echo "S3 sync skipped - using ECS deployment only"
          # aws s3 sync .next/static s3://${{ secrets.AWS_S3_BUCKET_STAGING }}/_next/static --cache-control "public, max-age=31536000, immutable"
          # aws s3 sync public s3://${{ secrets.AWS_S3_BUCKET_STAGING }}/ --cache-control "public, max-age=3600"
          # aws s3 cp .next/server s3://${{ secrets.AWS_S3_BUCKET_STAGING }}/_next/server --recursive --cache-control "public, max-age=3600"

      - name: Invalidate CloudFront Cache (Staging)
        run: |
          echo "CloudFront invalidation skipped - using ECS deployment only"
          # aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_STAGING }} --paths "/*"

      - name: Deploy to AWS ECS (Staging)
        run: |
          aws ecs update-service --cluster rural-development-staging-cluster --service rural-development-staging-service --force-new-deployment



  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS S3 (Production)
        run: |
          echo "S3 sync skipped - using ECS deployment only"
          # aws s3 sync .next/static s3://${{ secrets.AWS_S3_BUCKET_PRODUCTION }}/_next/static --cache-control "public, max-age=31536000, immutable"
          # aws s3 sync public s3://${{ secrets.AWS_S3_BUCKET_PRODUCTION }}/ --cache-control "public, max-age=3600"
          # aws s3 cp .next/server s3://${{ secrets.AWS_S3_BUCKET_PRODUCTION }}/_next/server --recursive --cache-control "public, max-age=3600"

      - name: Invalidate CloudFront Cache (Production)
        run: |
          echo "CloudFront invalidation skipped - using ECS deployment only"
          # aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} --paths "/*"

      - name: Deploy to AWS ECS (Production)
        run: |
          aws ecs update-service --cluster rural-development-production-cluster --service rural-development-production-service --force-new-deployment



  # Docker Build and Push to AWS ECR
  docker-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/rural-development:latest
            ${{ steps.login-ecr.outputs.registry }}/rural-development:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to AWS EKS (Optional)
  deploy-eks:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/rural-development rural-development=${{ steps.login-ecr.outputs.registry }}/rural-development:${{ github.sha }}
          kubectl rollout status deployment/rural-development 